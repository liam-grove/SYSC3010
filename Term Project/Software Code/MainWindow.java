package gem;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Nirda
 */
public class MainWindow extends javax.swing.JFrame {
    
    public  float temp ;
    public  float hum ; 
    public  int light ;

    /**
     * Creates new form Main
     */
    public MainWindow() {
        initComponents();
        Thread object = new Thread(new UDPClient());
        object.start();
    }
    public MainWindow(float t,float h, int l) throws SQLException {
        initComponents();
        temp = t;
        hum = h;
        light = l; 
        updateCurrent();
        Thread object = new Thread(new UDPClient());
        object.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        PanelA = new javax.swing.JPanel();
        PanelB = new javax.swing.JPanel();
        CurrentConditionsLabel = new javax.swing.JLabel();
        TempLabel = new javax.swing.JLabel();
        HumidityLabel = new javax.swing.JLabel();
        LightLabel = new javax.swing.JLabel();
        WaterLabel = new javax.swing.JLabel();
        CurrentTempLabel = new javax.swing.JLabel();
        CurrentHumidityLabel = new javax.swing.JLabel();
        CurrentLightLabel = new javax.swing.JLabel();
        CurrentWaterLabel = new javax.swing.JLabel();
        CreateReportButton = new javax.swing.JButton();
        PanelC = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ChangeOptimalButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        PanelB.setBackground(new java.awt.Color(0, 102, 204));
        PanelB.setForeground(new java.awt.Color(0, 102, 255));

        CurrentConditionsLabel.setFont(new java.awt.Font("Tempus Sans ITC", 1, 24)); // NOI18N
        CurrentConditionsLabel.setText("Current Conditons ");

        TempLabel.setText("Temperature (Â°C) :");

        HumidityLabel.setText("Humidity:");

        LightLabel.setText("Hours of Light: ");

        WaterLabel.setText("Time Last Watered:");

        CurrentTempLabel.setText("jLabel2");

        CurrentHumidityLabel.setText("jLabel3");

        CurrentLightLabel.setText("jLabel4");

        CurrentWaterLabel.setText("jLabel5");

        CreateReportButton.setText("Create Report");
        CreateReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateReportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelBLayout = new javax.swing.GroupLayout(PanelB);
        PanelB.setLayout(PanelBLayout);
        PanelBLayout.setHorizontalGroup(
            PanelBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelBLayout.createSequentialGroup()
                .addGroup(PanelBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelBLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(CurrentConditionsLabel))
                    .addGroup(PanelBLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(PanelBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(HumidityLabel)
                            .addComponent(TempLabel)
                            .addComponent(LightLabel)
                            .addComponent(WaterLabel))
                        .addGap(18, 18, 18)
                        .addGroup(PanelBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CurrentTempLabel)
                            .addComponent(CurrentHumidityLabel)
                            .addComponent(CurrentLightLabel)
                            .addComponent(CurrentWaterLabel)))
                    .addGroup(PanelBLayout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(CreateReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        PanelBLayout.setVerticalGroup(
            PanelBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelBLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CurrentConditionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(PanelBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TempLabel)
                    .addComponent(CurrentTempLabel))
                .addGap(18, 18, 18)
                .addGroup(PanelBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HumidityLabel)
                    .addComponent(CurrentHumidityLabel))
                .addGap(18, 18, 18)
                .addGroup(PanelBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LightLabel)
                    .addComponent(CurrentLightLabel))
                .addGap(18, 18, 18)
                .addGroup(PanelBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WaterLabel)
                    .addComponent(CurrentWaterLabel))
                .addGap(95, 95, 95)
                .addComponent(CreateReportButton)
                .addContainerGap(80, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 1, 24)); // NOI18N
        jLabel1.setText("Add Later");

        ChangeOptimalButton.setText("Change Optimal Conditons");
        ChangeOptimalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangeOptimalButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelCLayout = new javax.swing.GroupLayout(PanelC);
        PanelC.setLayout(PanelCLayout);
        PanelCLayout.setHorizontalGroup(
            PanelCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelCLayout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(ChangeOptimalButton)
                .addContainerGap(53, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelCLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(96, 96, 96))
        );
        PanelCLayout.setVerticalGroup(
            PanelCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelCLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(66, 66, 66)
                .addComponent(ChangeOptimalButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout PanelALayout = new javax.swing.GroupLayout(PanelA);
        PanelA.setLayout(PanelALayout);
        PanelALayout.setHorizontalGroup(
            PanelALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelALayout.createSequentialGroup()
                .addComponent(PanelB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PanelC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelALayout.setVerticalGroup(
            PanelALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(PanelC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void CreateReportButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:
    }                                                  

    private void ChangeOptimalButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        dispose();
        try {
            new OptimalConditions().setVisible(true);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                                   

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainWindow m = new MainWindow();
                m.setVisible(true);
                try {
                    m.updateCurrent();
                } catch (SQLException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                //new MainWindow().setVisible(true);

            }
        });
    }
   
    public void updateLabels(float t, float h, int l)
    {
        temp = t;
        hum = h;
        light = l; 
        
    }
    
    
    public void updateCurrent() throws SQLException 
    {
        float idealTemp = 0;
        float idealHumidity = 0;
        int idealLight = 0;

        try {

            String query1 = "SELECT Optimal_Temperature FROM optimal_conditions";
            ResultSet rs1 = LinkJavaMySQL.selectQuery(query1);
            while(rs1.next())
            {
                idealTemp = rs1.getFloat("Optimal_Temperature");
            }
            
            String query2 = "SELECT Optimal_Humidity FROM optimal_conditions";
            ResultSet rs2 = LinkJavaMySQL.selectQuery(query2);
            while(rs2.next())
            {
                idealHumidity = rs2.getFloat("Optimal_Humidity");
            }
            
            String query3 = "SELECT light FROM optimal_conditions";
            ResultSet rs3 = LinkJavaMySQL.selectQuery(query3);
            while(rs3.next())
            {
                idealLight = rs3.getInt("light");               
            }
            

            if(temp<idealTemp)
            {
                CurrentTempLabel.setText(String.valueOf(temp));
                CurrentTempLabel.setForeground(Color.green);
            }else{
                CurrentTempLabel.setText(String.valueOf(6));
                CurrentTempLabel.setForeground(Color.red);
            }
            
            if(hum<idealHumidity)
            {
                CurrentHumidityLabel.setText(String.valueOf(hum));
                CurrentHumidityLabel.setForeground(Color.green);
            }else{
                CurrentHumidityLabel.setText(String.valueOf(7));
                CurrentHumidityLabel.setForeground(Color.red);
            }
            
            if(light<idealLight)
            { 
                CurrentLightLabel.setText(String.valueOf(light));
                CurrentLightLabel.setForeground(Color.green);
            }else{
                CurrentLightLabel.setText(String.valueOf(3));
                CurrentLightLabel.setForeground(Color.red);
            }

        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton ChangeOptimalButton;
    private javax.swing.JButton CreateReportButton;
    private javax.swing.JLabel CurrentConditionsLabel;
    private javax.swing.JLabel CurrentHumidityLabel;
    private javax.swing.JLabel CurrentLightLabel;
    private javax.swing.JLabel CurrentTempLabel;
    private javax.swing.JLabel CurrentWaterLabel;
    private javax.swing.JLabel HumidityLabel;
    private javax.swing.JLabel LightLabel;
    private javax.swing.JPanel PanelA;
    private javax.swing.JPanel PanelB;
    private javax.swing.JPanel PanelC;
    private javax.swing.JLabel TempLabel;
    private javax.swing.JLabel WaterLabel;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration                   

   

}
